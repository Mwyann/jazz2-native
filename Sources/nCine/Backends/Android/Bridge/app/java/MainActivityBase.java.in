package @NCINE_REVERSE_DNS@;

import android.app.NativeActivity;
import android.content.Intent;
import android.hardware.display.DisplayManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.provider.Settings;
import android.provider.Settings;
import android.view.KeyEvent;
import android.window.OnBackInvokedCallback;
import android.window.OnBackInvokedDispatcher;
import @NCINE_REVERSE_DNS@.Keep;

public abstract class MainActivityBase extends NativeActivity implements DisplayManager.DisplayListener {

	private final Handler mainHandler = new Handler(Looper.getMainLooper());
		
	private final OnBackInvokedCallback backCallback = () -> {
		System.err.println("[JAZZ-TEST] OnBackInvokedCallback");
		mainHandler.post(() -> {
			System.err.println("[JAZZ-TEST] OnBackInvokedCallback INNER");
			nativeBackInvoked();
		});
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// Register a display listener to update the monitors array
		DisplayManager dm = getSystemService(DisplayManager.class);
		dm.registerDisplayListener(this, null);
		
		if (android.os.Build.VERSION.SDK_INT >= 33) {
			getOnBackInvokedDispatcher().registerOnBackInvokedCallback(
				OnBackInvokedDispatcher.PRIORITY_DEFAULT,
				backCallback
			);
		}
		
		handleIntent(getIntent());
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		
		if (android.os.Build.VERSION.SDK_INT >= 33) {
			getOnBackInvokedDispatcher().unregisterOnBackInvokedCallback(backCallback);
		}
	}
	
	@Override
	protected void onNewIntent(Intent intent) {
		super.onNewIntent(intent);
		handleIntent(intent);
	}

	@Override
	public void onDisplayAdded(int displayId) {
	}

	@Override
	public void onDisplayChanged(int displayId) {
	}

	@Override
	public void onDisplayRemoved(int displayId) {
	}

	@Keep
	public String getPreferredLanguage() {
		try {
			java.util.Locale currentLocale;
			if (android.os.Build.VERSION.SDK_INT < 24) {
				currentLocale = getResources().getConfiguration().locale;
			} else {
				currentLocale = getResources().getConfiguration().getLocales().get(0);
			}
			return currentLocale.getLanguage() + "-" + currentLocale.getCountry();
		} catch (Exception ignored) {
			return null;
		}
	}
	
	@Keep
	public boolean isScreenRound() {
		if (android.os.Build.VERSION.SDK_INT < 23) {
			return false;
		}
		
		try {
			return getResources().getConfiguration().isScreenRound();
		} catch (Exception ignored) {
			return false;
		}
	}

	@Keep
	public boolean hasExternalStoragePermission() {
		if (android.os.Build.VERSION.SDK_INT < 30) {
			return false;
		}
		
		try {
			return Environment.isExternalStorageManager();
		} catch (Exception ignored) {
			return false;
		}
	}

	@Keep
	public void requestExternalStoragePermission() {
		if (android.os.Build.VERSION.SDK_INT < 30) {
			return;
		}
	
		try {
			Uri uri = Uri.parse("package:" + BuildConfig.APPLICATION_ID);
			Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION, uri);
			startActivity(intent);
		} catch (Exception ignored) {
			try {
				Intent intent = new Intent();
				intent.setAction(Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);
				startActivity(intent);
			} catch (Exception ignored2) {
			}
		}
	}
	
	@Keep
	public void setActivityEnabled(String activityName, boolean enable) {
		// Supported only in MainActivity to avoid duplicating activities
	}

	@Keep
	public boolean openUrl(String url) {
		try {
			Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
			startActivity(browserIntent);
			return true;
		} catch (Exception e) {
			System.err.println("Caught exception in openUrl(): " + e.getMessage());
			return false;
		}
	}
	
	private void handleIntent(Intent intent) {
		if (intent != null) {
			Uri uri = intent.getData();
			if (uri != null) {
				nativeHandleIntent(intent.getAction(), uri.toString());
			}
		}
	}

	// Calls `AndroidApplication::HandleBackInvoked()`
	protected native void nativeBackInvoked();
	
	// Calls `EglGfxDevice::updateMonitorsFromJni()`
	protected native void nativeUpdateMonitors();
	
	// Calls `AndroidApplication::HandleIntent()`
	protected native void nativeHandleIntent(String action, String uri);

	static {
		@JAVA_SYSTEM_LOADLIBRARY_OPENAL@
		@JAVA_SYSTEM_LOADLIBRARY_NCINE@
		// It needs to be explicitly loaded for `jnicall_functions` to work (despite `android.app.lib_name`)
		try {
			System.loadLibrary("game");
		} catch (UnsatisfiedLinkError e) {
			System.err.println("Caught UnsatisfiedLinkError: " + e.getMessage());
		}
	}

}
